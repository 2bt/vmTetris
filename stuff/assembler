#!/usr/bin/python


# code word range
M = 70

# number of registers
# can be M / 2
R = 20

import sys


defines = {}


def subst(o):
	if len(o) == 3 and o[0] == o[2] == "'":
		print str(ord(o[1]))
		return str(ord(o[1]))
	while 1:
		if o in defines:
			o = defines[o]
			continue
		if o[0] == "[" and o[-1] == "]" and o[1:-1] in defines:
			o = "[" + defines[o[1:-1]] + "]"
			continue
		return o


def num_to_code(n):
	c = []
	while 1:
		c = [n % M] + c
		n /= M
		if n == 0: break
	return c


R = ["r%d" % x for x in range(R)]
R += ["[%s]" % r for r in R]


bin_ops = "sub", "add", "mov"
jmp_ops = "jmp", "jz", "jnz"


counter		= 0
bin_cmds	= []
txt_cmds	= []
labels		= {}


for l in open("tetris.txt"):
#for l in open("test.txt"):
	print l[:-1]

	l = l.strip()
	c = l.find("#")
	if c >= 0: l = l[:c].strip()
	if l == "": continue

	w = l.split()

	# label
	if w[0][-1] == ":":
		labels[w[0][:-1]] = counter
		w.pop(0)
		if not w: continue

	# define
	if w[0] == "define":
		assert w[1][0].isalnum()
		defines[w[1]] = w[2]
		continue

	op = w[0]
	if op in bin_ops:
		i = 1 + bin_ops.index(op) * 7
		a = R.index(subst(w[1]))
		b = subst(w[2])
		if b.isdigit():
			c = num_to_code(int(b))
			assert len(c) == 1
			if c[0] in [0, 1, 2]:
				i += c[0]
				c = []
			else:
				i += 3
		else:
			i += 4
			c = [R.index(b)]
		bin_cmd = [ i, a ] + c

	elif op == "get": bin_cmd = [ 20, R.index(subst(w[1])) ]
	elif op == "rnd":
		b = subst(w[2])
		assert b.isdigit()
		c = num_to_code(int(b))
		assert len(c) == 1
		bin_cmd = [ 21, R.index(subst(w[1])) ] + c
	elif op in jmp_ops: bin_cmd = [ 31 + jmp_ops.index(op) * 10, w[1] ]
	elif op == "put":
		if len(w) == 1:
			bin_cmd = [ 61 ]
		else:
			b = subst(w[1])
			assert b.isdigit()
			c = num_to_code(int(b))
			assert len(c) < 3
			if len(c) == 2: assert c[0] == 1
			bin_cmd = [64 - len(c)] + c[-1:]
	elif op == "slp": bin_cmd = [ 64 ]
	else:
		print "WOOT"
		bin_cmd = [ int(op) ]

	counter += len(bin_cmd)
	bin_cmds += [ bin_cmd ]
	txt_cmds += [ "%-20s" % " ".join("%-5s" % x for x in w) ]




# apply labels
counter = 0
out = []

for txt, c in zip(txt_cmds, bin_cmds):
	if c[-1] in labels:
		l = ([0, 0] + num_to_code(labels[c[-1]]))[-2:]
		assert l[0] < 10 # label must be small enough
		c[0] += l[0]
		c[1] = l[1]
	print txt, "| %03x:" % counter, " ".join("%x" % c for c in c)
	counter += len(c)
	out += c

out += [0]

for i in range(20):
	print "%2d" % i, "".join(chr(i + 32 + x) for x in sorted(set(out))),
	c = "".join(chr(i + 32 + x) for x in out)
	print c.count("\\")

print out
code = "".join(chr(49 + x) for x in out)
print code
print len(code)
file("code", "w").write(code)


print 'char* b = "%s"' % code[:68]; code = code[68:]
while code: print '"%s"' % code[:78]; code = code[78:]

