# vim: tabstop=8 shiftwidth=8 noexpandtab syntax=python

	# registers
	define	X		r6
	define	A		r7
	define	B		r8
	define	S		r9
	define	T		r10
	define	POS		r11
	define	DIR		r12
	define	LEN		r13
	define	NOGRID		r14

	# grid start address
	define	GRID		20

	# grid size
	define	HEIGHT		19
	define	HEIGHTm1	18
	define	HEIGHTm2	17
	define	WIDTH		34
	define	WIDTHp1		35
	define	WIDTHm1		33


	# init grid walls
	mov	X	GRID
grid0:
	mov	A	WIDTH
grid1:
	sub	[X]	2
	sub	A	1
	jnz	grid1
	mov	A	HEIGHTm2
grid2:
	mov	NOGRID	X
	sub	[X]	2
	add	X	WIDTHm1
	add	B	0
	jnz	grid3
	sub	A	1
	jnz	grid2
	add	B	1
	jnz	grid0
grid3:


	# init pos
	mov	A	33
initpos:
	add	POS	10
	sub	A	1
	jnz	initpos


	mov	LEN	4
	mov	DIR	1


	# clear screen
	put	27
	put	'['
	put	'2'
	put	'J'


	# make food and start loop
	jnz	newfood



mainloop:
	# input
read:
	mov	A	T
	get	T
	add	T	1
	jnz	read

	# quit
	sub	A	28
	jz	exit

	# move
	sub	A	38
	jnz	noup
	mov	DIR	0
	sub	DIR	WIDTH
noup:
	sub	A	1
	jnz	nodown
	mov	DIR	WIDTH
nodown:
	sub	A	1
	jnz	noright
	mov	DIR	1
noright:
	sub	A	1
	jnz	noleft
	mov	DIR	0
	sub	DIR	1
noleft:


	# move
	add	POS	DIR
	# collision
	mov	X	[POS]
	jz	nocolli
	add	X	4
	jnz	exit

		# okay, we ate something
		add	LEN	1

		# inc score
		#mov	X	1
		add	[X]	0
	incscore:
		sub	[X]	9
		jz	incscore
		sub	X	1
		add	[X]	10
		mov	X	S

		# generate new food
	newfood:
		mov	X	NOGRID
		sub	X	GRID
		rnd	X
		add	X	GRID
		mov	A	[X]
		jnz	newfood

		sub	T	4
		mov	[X]	T

		mov	S	1
nocolli:

	# insert cell
	mov	X	POS
	mov	[X]	LEN


	add	S	0
	jz	update0
	sub	X	1
	sub	[X]	1
	jnz	update_done


update0:

	# update grid
	mov	X	GRID
	update:

		mov	A	[X]
		jz	writeback	# empty cell
		mov	B	[X]
		add	B	2	# -2 -> wall
		jz	writeback
		add	B	2	# -4 -> food
		jz	writeback
		sub	A	2	# worm end cell
		jz	writeback
		add	A	1	# worm

	writeback:


		# next cell
		mov	[X]	A
		sub	X	NOGRID
		jz	update_done
		add	X	NOGRID
		jnz	update
	update_done:



	# move cursor to corner
	put	27
	put	'['
	put	';'
	put	'H'


	# draw grid
	mov	X	GRID
	mov	T	HEIGHTm1
draw1:
	mov	S	WIDTH
draw2:


	# horizontal line
	mov	A	[X]
	add	X	WIDTH
	sub	A	[X]
	jz	horiz1
	sub	A	1
	jz	horiz1
	add	A	2
	jz	horiz1
	put	'_'
	jnz	horiz2
horiz1:
	put	32
horiz2:
	sub	X	WIDTH


	# remember X
	mov	B	X

	# vertical line
	mov	A	[X]
	add	[X]	0
	sub	A	[X]
	jz	vert1
	sub	A	1
	jz	vert1
	add	A	2
	jz	vert1
	put	'|'
	jnz	vert2
vert1:
	# TODO: use a loop to make this shorter?
	mov	A	[X]
	add	X	WIDTH
	sub	A	[X]
	jz	vert11
	sub	A	1
	jz	vert11
	add	A	2
	jz	vert11

	sub	X	1
	mov	A	[X]
	sub	X	WIDTH
	sub	A	[X]
	jz	vert11
	sub	A	1
	jz	vert11
	add	A	2
	jz	vert11


	put	'_'
	jnz	vert2

vert11:


	put	32
vert2:
	mov	X	B



	# next cell
	add	[X]	0
	sub	S	1
	jnz	draw2


	# next row
	put	10

	sub	T	1
	jnz	draw1



	# print digits
	put	'S'
	put	'c'
	put	'o'
	put	'r'
	put	'e'
	put	':'
	put	32
	mov	X	4
skip_zero:
	mov	B	[X]
	jnz	skip_done
	sub	X	1
	jnz	skip_zero
	add	[X]	0
skip_done:
next_digit:
	mov	B	[X]
	add	B	'0'
	put
	sub	X	1
	jnz	next_digit
	put	10

	slp
	slp
	slp
	slp
	slp
	jz	mainloop

exit:
