# vim: tabstop=8 shiftwidth=8 noexpandtab syntax=python

	# memory addresses
	define	PREGRID		22
	define	GRID		44

	define	STARTPOS	26

	# colors
	define	COLOR_FRAME	7
	define	COLOR_STONE	4
	define	COLOR_FILL	5

	# registers
	define	Q		r4
	define	A		r5
	define	B		r6
	define	C		r7
	define	D		r8
	define	S		r9
	define	T		r10
	define	X		r11
	define	POS		r12
	define	POS2		r13
	define	ROT		r14
	define	ROT2		r15
	define	STONE		r16
	define	SPEED		r17
	define	DELAY		r18
	define	DOWN		r19


	mov	DELAY	1
	mov	SPEED	30


	# load stone data
	#mov	X	360
	mov	A	36
	xaddloop:
		add	X	10
		sub	A	1
		jnz	xaddloop


	# square
	mov	[X]	13
	mov	[X]	10
	mov	[X]	1

	mov	[X]	13
	mov	[X]	10
	mov	[X]	1

	mov	[X]	13
	mov	[X]	10
	mov	[X]	1

	mov	[X]	13
	mov	[X]	10
	mov	[X]	1

	# T
	mov	[X]	11
	mov	[X]	2
	mov	[X]	10

	mov	[X]	1
	mov	[X]	10
	mov	[X]	12

	mov	[X]	1
	mov	[X]	10
	mov	[X]	2

	mov	[X]	1
	mov	[X]	12
	mov	[X]	10

	# I
	mov	[X]	1
	mov	[X]	22
	mov	[X]	11

	mov	[X]	11
	mov	[X]	2
	mov	[X]	1

	mov	[X]	1
	mov	[X]	22
	mov	[X]	11

	mov	[X]	11
	mov	[X]	2
	mov	[X]	1

	# L
	mov	[X]	1
	mov	[X]	22
	mov	[X]	1

	mov	[X]	11
	mov	[X]	2
	mov	[X]	9

	add	X	1
	mov	[X]	1
	mov	[X]	22

	mov	[X]	2
	mov	[X]	9
	mov	[X]	2

	# J
	mov	[X]	1
	mov	[X]	21
	mov	[X]	1

	add	X	1
	mov	[X]	11
	mov	[X]	2

	mov	[X]	1
	mov	[X]	1
	mov	[X]	21

	mov	[X]	11
	mov	[X]	2
	mov	[X]	11

	# Z
	add	X	1
	mov	[X]	1
	mov	[X]	12

	mov	[X]	2
	mov	[X]	11
	mov	[X]	10

	add	X	1
	mov	[X]	1
	mov	[X]	12

	mov	[X]	2
	mov	[X]	11
	mov	[X]	10

	# S
	mov	[X]	1
	mov	[X]	1
	mov	[X]	9

	mov	[X]	1
	mov	[X]	12
	mov	[X]	11

	mov	[X]	1
	mov	[X]	1
	mov	[X]	9

	mov	[X]	1
	mov	[X]	12
	mov	[X]	11

	# prepare grid
	mov	X	PREGRID
	mov	T	22
prep1:
	mov	[X]	COLOR_FRAME
	add	X	10
	sub	T	1
	jnz	prep1

	mov	T	12
prep2:
	mov	[X]	COLOR_FRAME
	sub	T	1
	jnz	prep2


	# clear screen
	put	27
	put	'['
	put	'2'
	put	'J'

	# hide cursor
	put	27
	put	'['
	put	'?'
	put	'2'
	put	'5'
	put	'l'

	jmp	start

mainloop:


	# save position and rotation
	mov	POS2	POS
	mov	ROT2	ROT
	mov	DOWN	0

	# auto drop
	sub	DELAY	1
	jz	down


	# input
read:
	mov	A	T
	get	T
	add	T	1
	jnz	read



	# quit
	sub	A	28
	jz	gameover

		# move
		sub	A	39
		jnz	nodown
	down:
		add	POS	11
		# remember that we're moving down
		mov	DOWN	1
		# reset delay
		mov	DELAY	SPEED
	nodown:
		sub	A	1
		jnz	noleft
		add	POS	1
	noleft:
		sub	A	1
		jnz	noright
		sub	POS	1
	noright:

		# rotate
		sub	A	52
		jnz	norot
		sub	ROT	9
		jz	norot
		add	ROT	12
	norot:



	# update grid
	mov	B	COLOR_STONE

updategrid:

		mov	X	PREGRID
		mov	T	23
	update1:
		mov	S	12

	update2:
		mov	A	[X]


		# clear old entries
		mov	C	COLOR_STONE
		sub	C	A
		jnz	update3
		mov	A	0
		mov	[X]	0
		sub	X	1
	update3:

		# check if the 4 stone cells occupy the current cell
		mov	C	POS
		add	C	12
		sub	C	X
		jz	occupy

		mov	D	STONE
		add	D	ROT

		mov	C	POS


		mov	Q	3
	occupycheck:
		add	C	[D]
		sub	C	X
		jz	occupy
		add	C	X
		add	D	1
		sub	Q	1
		jnz	occupycheck
		jmp	nooccupy


	occupy:
		add	A	0
		jz	nocollision


			# break endless loop
			# check if stone is at spawn position
			mov	C	STARTPOS
			sub	C	POS
			jnz	nospawn
			mov	C	ROT
			sub	C	ROT2
			jz	gameover
		nospawn:


			# enable cell write only when moving downward
			add	DOWN	0
			jz	nowrite
			mov	B	COLOR_FILL

		nowrite:

			# reset position and rotation
			mov	POS	POS2
			mov	ROT	ROT2

			jmp	updategrid


	nocollision:
		# write cell
		mov	[X]	B
		sub	X	1

	nooccupy:
		add	X	1

		sub	S	1
		jnz	update2

		sub	X	1

		sub	T	1
		jnz	update1
	# end update grid



	# check if stone was dropped
	mov	C	COLOR_FILL
	sub	B	C
	jnz	nodrop


start:

	# reset position on collision
	mov	POS	STARTPOS

	# select new random stone
	rnd	Q	7
	add	Q	30
	# multiply by 12
	mov	C	11
	mov	STONE	Q
	stoneloop:
		add	STONE	Q
		sub	C	1
		jnz	stoneloop

	# random rotation
	rnd	ROT	3
	mov	C	ROT
	add	ROT	C
	add	ROT	C

	# check for gameover
check_gameover:
	mov	X	PREGRID
	mov	T	PREGRID
check1:
	mov	A	[X]
	add	X	1
	sub	A	COLOR_FILL
	jz	gameover
	sub	T	1
	jnz	check1




	# check for full lines
	mov	X	GRID
	mov	T	21
	full1:
		add	X	1
		mov	S	10
		mov	A	10

		full2:
			mov	C	COLOR_FILL
			sub	C	[X]
			jnz	full3
			sub	A	1
		full3:
			add	X	1
			sub	S	1
			jnz	full2

		add	A	0
		jnz	full4

		# line is full
		# increase line count
		digit:
			sub	[A]	9
			jz	digit
		sub	A	1
		add	[A]	10


		# increae speed
		add	r0	0
		jnz	notfaster
		sub	SPEED	1
	notfaster:

		# shift all upper lines down
		mov	S	X
		mov	A	X
		sub	A	33
		shift:
			mov	C	22
			add	C	A
			mov	[S]	[C]
			sub	S	1
			sub	S	1
			sub	A	1
			# are we there yet?
			jnz	shift

	full4:
		sub	T	1
		jnz	full1



nodrop:

	# move cursor to corner
	put	27
	put	'['
	put	'1'
	put	';'
	put	'H'


	# draw grid
	mov	X	GRID
	mov	T	21
draw1:
	mov	S	12
draw2:
	# pixel
	put	27
	put	'['
	put	'4'

	mov	A	[X]
	add	A	'0'
	put

	put	'm'
	put	32
	put	32


	# next cell
	add	X	1
	sub	S	1
	jnz	draw2


	# next row
	sub	X	1
	put	10

	sub	T	1
	jnz	draw1


	# sleep and loop
	slp
	jmp	mainloop

gameover:


	# reset color
	put	27
	put	'['
	put	'0'
	put	'm'

	# show cursor
	put	27
	put	'['
	put	'?'
	put	'2'
	put	'5'
	put	'h'

	# print number of cleared lines
	put	'L'
	put	'i'
	put	'n'
	put	'e'
	put	's'
	put	':'
	put	32


	# print digits
	mov	X	3
skip_zero:
	mov	C	[X]
	jnz	skip_done
	sub	X	1
	jnz	skip_zero
skip_done:
	add	X	1
next_digit:
	sub	X	1
	add	[X]	'0'
	put
	sub	X	1
	jnz	next_digit
	put	10
