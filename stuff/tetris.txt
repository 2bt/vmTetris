# vim: tabstop=8 shiftwidth=8 noexpandtab syntax=python

	# memory addresses
	define	PREGRID		22
	define	GRID		44

	define	STARTPOS	26

	# colors
	define	COLOR_FRAME	7
	define	COLOR_STONE	4
	define	COLOR_FILL	5

	# registers
	define	Q		r4
	define	A		r5
	define	B		r6
	define	C		r7
	define	D		r8
	define	S		r9
	define	T		r10
	define	X		r11
	define	POS		r12
	define	POS2		r13
	define	ROT		r14
	define	ROT2		r15
	define	STONE		r16
	define	SPEED		r17
	define	DELAY		r18
	define	DOWN		r19


	inc	DELAY
	mov	SPEED	30


	# load stone data
	mov	X	360


	# square
	mov	[X]	13
	mov	[X]	10
	inc	[X]

	mov	[X]	13
	mov	[X]	10
	inc	[X]

	mov	[X]	13
	mov	[X]	10
	inc	[X]

	mov	[X]	13
	mov	[X]	10
	inc	[X]

	# T
	mov	[X]	11
	mov	[X]	2
	mov	[X]	10

	inc	[X]
	mov	[X]	10
	mov	[X]	12

	inc	[X]
	mov	[X]	10
	mov	[X]	2

	inc	[X]
	mov	[X]	12
	mov	[X]	10

	# I
	inc	[X]
	mov	[X]	22
	mov	[X]	11

	mov	[X]	11
	mov	[X]	2
	inc	[X]

	inc	[X]
	mov	[X]	22
	mov	[X]	11

	mov	[X]	11
	mov	[X]	2
	inc	[X]

	# L
	inc	[X]
	mov	[X]	22
	inc	[X]

	mov	[X]	11
	mov	[X]	2
	mov	[X]	9

	inc	X
	inc	[X]
	mov	[X]	22

	mov	[X]	2
	mov	[X]	9
	mov	[X]	2

	# J
	inc	[X]
	mov	[X]	21
	inc	[X]

	inc	X
	mov	[X]	11
	mov	[X]	2

	inc	[X]
	inc	[X]
	mov	[X]	21

	mov	[X]	11
	mov	[X]	2
	mov	[X]	11

	# Z
	inc	X
	inc	[X]
	mov	[X]	12

	mov	[X]	2
	mov	[X]	11
	mov	[X]	10

	inc	X
	inc	[X]
	mov	[X]	12

	mov	[X]	2
	mov	[X]	11
	mov	[X]	10

	# S
	inc	[X]
	inc	[X]
	mov	[X]	9

	inc	[X]
	mov	[X]	12
	mov	[X]	11

	inc	[X]
	inc	[X]
	mov	[X]	9

	inc	[X]
	mov	[X]	12
	mov	[X]	11



	# prepare grid
	mov	X	PREGRID
	mov	T	22
prep1:
	mov	[X]	COLOR_FRAME
	mov	C	10
	add	X	C
	dec	T
	jnz	prep1

	mov	T	12
prep2:
	mov	[X]	COLOR_FRAME
	dec	T
	jnz	prep2


	# clear screen
	put	27
	put	'['
	put	'2'
	put	'J'

	# hide cursor
	put	27
	put	'['
	put	'?'
	put	'2'
	put	'5'
	put	'l'

	jmp	start

mainloop:


	# save position and rotation
	mov	POS2	POS
	mov	ROT2	ROT
	sub	DOWN	DOWN

	# auto drop
	dec	DELAY
	jz	down


	# input
read:
	mov	A	T
	get	T
	inc	T
	jnz	read



	# quit
	mov	C	28
	sub	A	C
	jz	gameover

		# move
		mov	C	39
		sub	A	C
		jnz	nodown
	down:
		mov	C	11
		add	POS	C
		# remember that we're moving down
		inc	DOWN
		# reset delay
		mov	DELAY	SPEED
	nodown:
		dec	A
		jnz	noleft
		inc	POS
	noleft:
		dec	A
		jnz	noright
		dec	POS
	noright:

		# rotate
		mov	C	52
		sub	A	C
		jnz	norot
		mov	D	9
		sub	ROT	D
		jz	norot
		mov	D	12
		add	ROT	D
	norot:



	# update grid
	mov	B	COLOR_STONE

updategrid:

		mov	X	PREGRID
		mov	T	23
	update1:
		mov	S	12

	update2:
		mov	A	[X]


		# clear old entries
		mov	C	COLOR_STONE
		sub	C	A
		jnz	update3
		sub	A	A
		mov	[X]	A
		dec	X
	update3:

		# check if the 4 stone cells occupy the current cell
		mov	C	POS
		mov	D	12
		add	C	D
		sub	C	X
		jz	occupy

		mov	D	STONE
		add	D	ROT

		mov	C	POS


		mov	Q	3
	occupycheck:
		add	C	[D]
		sub	C	X
		jz	occupy
		add	C	X
		inc	D
		dec	Q
		jnz	occupycheck
		jmp	nooccupy


	occupy:
		mov	A	A
		jz	nocollision


			# break endless loop
			# check if stone is at spawn position
			mov	C	STARTPOS
			sub	C	POS
			jnz	nospawn
			mov	C	ROT
			sub	C	ROT2
			jz	gameover
		nospawn:


			# enable cell write only when moving downward
			mov	DOWN	DOWN
			jz	nowrite
			mov	B	COLOR_FILL

		nowrite:

			# reset position and rotation
			mov	POS	POS2
			mov	ROT	ROT2

			jmp	updategrid


	nocollision:
		# write cell
		mov	[X]	B
		dec	X

	nooccupy:
		inc	X

		dec	S
		jnz	update2

		dec	X

		dec	T
		jnz	update1
	# end update grid



	# check if stone was dropped
	mov	C	COLOR_FILL
	sub	B	C
	jnz	nodrop


start:

	# reset position on collision
	mov	POS	STARTPOS

	# select new random stone
	mov	Q	7
	rnd
	mov	C	30
	add	Q	C
	# multiply by 12
	mov	C	11
	mov	STONE	Q
	stoneloop:
		add	STONE	Q
		dec	C
		jnz	stoneloop

	# random rotation
	mov	ROT	3
	rnd
	mov	C	ROT
	add	ROT	ROT
	add	ROT	C

	# check for gameover
check_gameover:
	mov	X	PREGRID
	mov	T	X
	mov	C	COLOR_FILL
check1:
	mov	A	[X]
	inc	X
	sub	A	C
	jz	gameover
	dec	T
	jnz	check1




	# check for full lines
	mov	X	GRID
	mov	T	21
	full1:
		inc	X
		mov	S	10
		mov	A	10

		full2:
			mov	C	COLOR_FILL
			sub	C	[X]
			jnz	full3
			dec	A
		full3:
			inc	X
			dec	S
			jnz	full2

		mov	A	A
		jnz	full4

		# line is full
		# increase line count
		sub	S	S
		digit1:
			inc	[S]
			dec	S
			mov	C	10
			sub	C	[S]
			jnz	digit2
			mov	[S]	0
			jmp	digit1
		digit2:


		# increae speed
		mov	r0	r0
		jnz	notfaster
		dec	SPEED
	notfaster:

		# shift all upper lines down
		mov	S	X
		mov	C	33
		mov	A	X
		sub	A	C
		shift:
			mov	C	22
			add	C	A
			mov	[S]	[C]
			dec	S
			dec	S
			dec	A
			# are we there yet?
			jnz	shift

	full4:
		dec	T
		jnz	full1



nodrop:

	# move cursor to corner
	put	27
	put	'['
	put	'1'
	put	';'
	put	'H'


	# draw grid
	mov	X	GRID
	mov	T	21
draw1:
	mov	S	12
draw2:
	# pixel
	put	27
	put	'['
	put	'4'

	mov	A	[X]
	mov	D	'0'
	add	A	D
	put

	put	'm'
	put	32
	put	32


	# next cell
	inc	X
	dec	S
	jnz	draw2


	# next row
	dec	X
	put	10

	dec	T
	jnz	draw1


	# sleep and loop
	slp
	jmp	mainloop

gameover:


	# reset color
	put	27
	put	'['
	mov	D	'0'
	put
	put	'm'

	# show cursor
	put	27
	put	'['
	put	'?'
	put	'2'
	put	'5'
	put	'h'

	# print number of cleared lines
	put	'L'
	put	'i'
	put	'n'
	put	'e'
	put	's'
	put	':'
	put	32


	# print digits
	mov	X	3
skip_zero:
	mov	C	[X]
	jnz	skip_done
	dec	X
	jnz	skip_zero
skip_done:
	inc	X
next_digit:
	dec	X
	add	[X]	D
	put
	dec	X
	jnz	next_digit
	put	10
